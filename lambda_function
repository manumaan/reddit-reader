
import json
import boto3
from botocore.exceptions import BotoCoreError, ClientError
from contextlib import closing
import sys
from base64 import b64encode
import requests
from datetime import datetime

session = boto3.Session(region_name="ap-south-1")
polly = session.client("polly")
ssm_client = boto3.client('ssm')
dd_client = boto3.client('dynamodb')


def get_new_token():
    ssm_client = boto3.client('ssm')
    auth = requests.auth.HTTPBasicAuth('YtdVohfwuhDwnDNZwS5qKw', '26GrkoRlIkAFxEigaYOniGSjimxlCw')
    print('auth done')

    # here we pass our login method (password), username, and password
    data = {'grant_type': 'password',
            'username': 'general_smooth',
            'password': 'jan20vava'}

    # setup our header info, which gives reddit a brief description of our app
    headers = {'User-Agent': 'catpostv1/0.0.1'}

    # send our request for an OAuth token
    res = requests.post('https://www.reddit.com/api/v1/access_token',
                        auth=auth, data=data, headers=headers)
    TOKEN = res.json()['access_token']
    # print(TOKEN)
    response = ssm_client.put_parameter(
        Name='/readreddit/access_token',
        Overwrite=True,
        Value=TOKEN)
    return TOKEN


def lambda_handler(event, context):
    read_title = {'todayilearned', 'news', 'worldnews', 'Showerthoughts', 'science'}
    intro_text = '<speak>Todays popular posts from <break/> <emphasis level="strong">reddit</emphasis><break/>'
    intro_sub_text = 'Here''s a post from '
    text_content = ''

    token_parameter = ssm_client.get_parameter(Name='/readreddit/access_token')
    token_expires = ssm_client.get_parameter(Name='/readreddit/token_expires')

    if datetime.now() < datetime.strptime(token_expires['Parameter']['Value'], "%Y-%m-%d %H:%M:%S.%f"):
        TOKEN = token_parameter['Parameter']['Value']
        headers = {'User-Agent': 'catpostv1/0.0.1', 'Authorization': 'Bearer ' + TOKEN}
    else:
        TOKEN = get_new_token()
        headers = {'User-Agent': 'catpostv1/0.0.1', 'Authorization': 'Bearer ' + TOKEN}

    # while the token is valid (~2 hours) we just add headers=headers to our requests
    res = requests.get("https://oauth.reddit.com/r/todayilearned+news+worldnews+Showerthoughts+science/hot",
                       headers=headers)

    if int(float(res.headers['x-ratelimit-remaining'])) > 0:
        json_object = res.json()
        done_subs = set()
        text_content = intro_text
        for post in res.json()['data']['children']:
            subreddit = post['data']['subreddit']
            if subreddit in read_title and subreddit not in done_subs:
                done_subs.add(subreddit)
                text_content = text_content + intro_sub_text + \
                               '<emphasis level="strong">' + subreddit + '</emphasis><break/>' + \
                               post['data']['title'] + '<break/>'
        text_content = text_content + '</speak>'
        text_content = text_content.replace('TIL', '<say-as interpret-as="characters">TIL</say-as><break/>')
    else:
        text_content = '<speak> I am sorry, you have reached the Reddit API limit. Please wait and try again later.</speak>'
    # print('created text')
    # print(text_content)

    read_response = dd_client.get_item(TableName='readreddit', Key={'id': {'S': 'last_text'}})
    print(read_response)
    print(read_response['Item']['value']['S'])
    if read_response['Item']['value']['S'] == text_content:
        print('content has not changed. reusing audio')
        encoded_audio = dd_client.get_item(TableName='readreddit', Key={'id': {'S': 'last_audio'}})['Item']['value']['S']

    else:
        write_respons = dd_client.put_item(TableName='readreddit',
                                           Item={'id': {'S': 'last_text'}, 'value': {'S': text_content}})
        try:
            # Request speech synthesis
            response = polly.synthesize_speech(VoiceId='Kimberly',
                                               OutputFormat='mp3',
                                               Text=text_content,
                                               TextType='ssml')
            # print('response got')
        except (BotoCoreError, ClientError) as error:
            # The service returned an error, exit gracefully
            # print('error')
            # print(error)
            sys.exit(-1)

        # Access the audio stream from the response
        if "AudioStream" in response:
            # Note: Closing the stream is important because the service throttles on the
            # number of parallel connections. Here we are using contextlib.closing to
            # ensure the close method of the stream object will be called automatically
            # at the end of the with statement's scope.
            with closing(response["AudioStream"]) as stream:
                try:
                    audio_stream = response["AudioStream"].read()
                    encoded_audio = b64encode(audio_stream).decode('utf-8')
                    # Open a file for writing the output as a binary stream
                    write_respons = dd_client.put_item(TableName='readreddit',
                                                       Item={'id': {'S': 'last_audio'}, 'value': {'S': encoded_audio}})



                except IOError as error:
                    # Could not write to file, exit gracefully
                    print('IOError')
                    return {
                        'statusCode': 503,
                        'body': json.dumps('Could not create mp3 file')
                    }

        else:
            print("Could not stream audio")
            return {
                'statusCode': 503,
                'body': json.dumps('response no contain audio data')
            }

    responseObject = {}
    responseObject['statusCode'] = 200
    responseObject['headers'] = {}
    responseObject['headers']['Content-Type'] = 'audio/mpeg'
    responseObject['isBase64Encoded'] = 'true'
    responseObject['body'] = encoded_audio
    print('response ready')
    return responseObject
